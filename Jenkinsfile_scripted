node("worker1"){
    nodejs = tool 'nodejs16'
    properties([pipelineTriggers([pollSCM('H/5 * * * *'),githubPush()])])
    try{
    stage('Checksum') { 
        checkout scm
    }
    stage('Build'){
        def stages = [:]

        stages["compressed JS"] = {
           sh "ls www/js/ | xargs -I{file} ${nodejs}/bin/uglifyjs -o www/min/{file} --compress"
        }
        stages["compressed CSS"] = {
           sh "ls www/css/ | xargs -I{file} ${nodejs}/bin/cleancss -o www/min/{file}"
        }
        parallel(stages)
    }
    stage('Archived'){
         sh "tar --exclude=.git --exclude=www/js --exclude=www/css -czf /tmp/mdt.tar.gz ."
    }
    }
    catch (ex){
        echo "Get error"
    } 
    stage('post'){
      always{
        archiveArtifacts artifacts: 'mdt.tar.gz'
        def server = Artifactory.server 'jfrog'
        def uploadSpec = """{
                "files": [
                    {
                    "pattern": "mdt.tar.gz",
                    "target": "mdt/artifact_v_${BUILD_ID}.tar.gz"
                    }
                ]
            }"""
        server.upload spec: uploadSpec, failNoOp: true
      }
      if ( currentBuild.result == 'SUCCESS') {
		echo "Build success!"
	  }
	  if (currentBuild.result == 'FAILURE'){
		echo " Build failure. There was some error"
	  }  
   }
}